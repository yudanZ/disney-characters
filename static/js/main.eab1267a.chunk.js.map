{"version":3,"sources":["components/cart.component.jsx","components/cartList.component.jsx","components/searchBox.component.jsx","components/errorBoundry.component.jsx","containers/App.js","api/api.js","serviceWorker.js","index.js"],"names":["Cart","props","className","src","imageUrl","alt","style","width","height","name","CartList","characters","map","character","index","key","id","_id","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","children","React","Component","App","getCharacters","link","page","fetch","then","response","json","data","filterData","filter","item","undefined","setState","loaded","nextPage","hasMore","onSearchChange","event","searchField","target","value","filterCharacters","toLowerCase","includes","length","dataLength","next","loader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"wOAYeA,EAVF,SAACC,GAAD,OACT,yBAAKC,UAAU,mDACX,yBAAKC,IAAKF,EAAMG,SAAUC,IAAI,aAAaC,MAAQ,CAACC,MAAO,QAASC,OAAQ,WAC5E,6BACI,4BAAKP,EAAMQ,SCiBRC,EApBE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAEf,OACI,6BAEIA,EAAWC,KAAI,SAACC,EAAWC,GACvB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLE,GAAIH,EAAUI,IACdR,KAAOI,EAAUJ,KACjBL,SAAWS,EAAUT,gBCD9Bc,EAXG,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAF,OACd,yBAAKjB,UAAU,OACX,2BACIA,UAAU,mCACVkB,KAAK,SACLC,YAAY,2BACZC,SAAUH,M,eCcPI,E,kDAnBX,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IACDuB,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKJ,MAAM,CAACC,UAAU,M,+BAGtB,OAAIG,KAAKJ,MAAMC,SACJ,wDAEJG,KAAK3B,MAAM4B,a,GAfCC,IAAMC,WC4FlBC,E,kDApFb,WAAY/B,GAAO,IAAD,8BAChB,gBAkBFgC,cAAgB,WAAO,IC7BDC,ED+BdC,EAAS,EAAKX,MAAdW,MC/BcD,EDgCZ,6CAAD,OAA8CC,GC/BvDC,MAAMF,GAAMG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDgCnCF,MAAK,SAAAG,GAEJ,IAAMC,EAAaD,EAAKA,KAAKE,QAAQ,SAAAC,GAAI,YAAsBC,IAAlBD,EAAKvC,YAClD,EAAKyC,SAAS,CAAClC,WAAY8B,IAC3B,EAAKI,SAAS,CAACC,QAAQ,IACnBN,EAAKO,UACPZ,IACA,EAAKU,SAAS,CAACV,KAAMA,IACrB,EAAKU,SAAS,CAACG,SAAS,KAExB,EAAKH,SAAS,CAACG,SAAS,QAjCZ,EAyClBC,eAAiB,SAACC,GAEhB,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAOC,SAxCzC,EAAK7B,MAAQ,CACXb,WAAY,GACZwC,YAAa,GACbhB,KAAM,EACNW,QAAQ,EACRE,SAAS,GARK,E,gEAchBpB,KAAKK,kB,+BAgCE,IAAD,SAC6BL,KAAKJ,MAAhCb,EADF,EACEA,WAAYwC,EADd,EACcA,YAEdG,EAAmB3C,EAAW+B,QAAQ,SAAA7B,GAC1C,OAAQA,EAAUJ,KAAK8C,cAAcC,SAASL,EAAYI,kBAG5D,OAAQ5C,EAAW8C,OAIf,yBAAKvD,UAAU,MACb,wBAAIA,UAAU,MAAd,qBACA,kBAAC,EAAD,CAAWiB,aAAcS,KAAKqB,iBAC9B,kBAAC,IAAD,CACES,WAAYJ,EACZK,KAAM,kBAAM,EAAK1B,iBACjBe,QAASpB,KAAKJ,MAAMwB,QACpBY,OACE,yBACEzD,IAAI,wFACJE,IAAI,aAGPuB,KAAKJ,MAAMsB,OACV,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnC,WAAa2C,KAGzB,KArBR,2C,GAvDYxB,IAAMC,WEGJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlD,GACLmD,QAAQnD,MAAMA,EAAMoD,a","file":"static/js/main.eab1267a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cart = (props) => (\r\n    <div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-s'>\r\n        <img src={props.imageUrl} alt='My Friends' style= {{width: '200px', height: '200px'}}></img>\r\n        <div>\r\n            <h2>{props.name}</h2>\r\n            \r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Cart;","import React from 'react';\r\nimport Cart from './cart.component';\r\n\r\nconst CartList = ({characters}) => {\r\n    \r\n    return (\r\n        <div>\r\n           { \r\n            characters.map((character, index) => {\r\n                return (\r\n                    <Cart \r\n                        key={index} \r\n                        id={character._id} \r\n                        name= {character.name} \r\n                        imageUrl= {character.imageUrl} \r\n                    />\r\n                    ) \r\n                }) \r\n             }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CartList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => (\r\n    <div className='pa2'>\r\n        <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type=\"search\" \r\n            placeholder=\"search disney characters\"\r\n            onChange={searchChange}>\r\n        </input>\r\n    </div>\r\n)\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.state({hasError: true})\r\n    }\r\n    render() {\r\n        if( this.state.hasError){\r\n            return <h1>Opppps. That is not good</h1>\r\n        }\r\n        return this.props.children    \r\n    }       \r\n    \r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\n\nimport CartList from '../components/cartList.component';\nimport SearchBox from '../components/searchBox.component';\nimport { apiCall } from '../api/api';\nimport './App.css';\n//import Scroll from '../components/scroll.component';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport ErrorBoundry from '../components/errorBoundry.component';\nclass App extends React.Component {\n  constructor(props){\n    super();\n\n    this.state = {\n      characters: [],\n      searchField: '',\n      page: 1,\n      loaded: false,\n      hasMore: true\n    }\n    \n  }\n\n  componentDidMount(){\n    this.getCharacters();\n    \n  }\n\n  \n  getCharacters = () => {\n\n    let { page } = this.state;\n    apiCall(`https://api.disneyapi.dev/characters?page=${page}`)\n    .then(data => {\n      //console.log(data.data)\n      const filterData = data.data.filter( item => item.imageUrl !== undefined)\n      this.setState({characters: filterData});\n      this.setState({loaded: true});\n      if( data.nextPage){\n        page ++\n        this.setState({page: page});\n        this.setState({hasMore: true});\n      }else{\n        this.setState({hasMore: false})\n      }\n\n      //console.log( this.state)\n    })\n    \n  }\n\n  onSearchChange = (event) => {\n    //console.log(event.target.value);\n    this.setState({searchField: event.target.value})\n  }\n\n  render(){\n    const { characters, searchField} = this.state;\n\n    const filterCharacters = characters.filter( character => { \n      return  character.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n\n    return !characters.length ?\n      <h1>Loading</h1>\n      :\n      (\n        <div className='tc'>\n          <h1 className=\"f2\">Disney Characters</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <InfiniteScroll\n            dataLength={filterCharacters}\n            next={() => this.getCharacters()}\n            hasMore={this.state.hasMore}\n            loader={\n              <img\n                src=\"https://res.cloudinary.com/chuloo/image/upload/v1550093026/scotch-logo-gif_jq4tgr.gif\"\n                alt=\"loading\"\n              />\n            }>\n            {this.state.loaded ?\n              <ErrorBoundry>\n                <CartList characters= {filterCharacters}/>\n              </ErrorBoundry>\n              :\n              ''\n            }\n            \n          </InfiniteScroll>\n        </div>          \n      )     \n  } //render\n}\n\nexport default App;\n","export const apiCall = (link) =>\r\n  fetch(link).then(response => response.json())","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}